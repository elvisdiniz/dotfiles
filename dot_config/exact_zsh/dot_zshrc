# make sure the re_match_pcre option is enabled in FreeBSD systems
# the precompiled version of zsh does not use pcre, needs to build and compile with the module:
#
# how to build a a package from ports: https://www.cyberciti.biz/faq/install-ports-in-freebsd/
# zvm bug: https://github.com/jeffreytse/zsh-vi-mode/issues/159
if [ "$options[re_match_pcre]" = "off" ] && [ -f /usr/local/lib/zsh/5.9/zsh/pcre.so ] && [ $(uname -s) = "FreeBSD" ]; then
    setopt re_match_pcre
fi
######################################################################################################################

$HOME/.local/scripts/create_bin_symlinks.sh

source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/init.sh"

# install, if not installed yet, and source zinit
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

export FZF_DEFAULT_OPTS=" \
--color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8"
export FZF_TMUX_OPTS="--height 40% --tmux bottom,40% --layout reverse --border top"

# Configure fzf-tab
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
# NOTE: don't use escape sequences here, fzf-tab will ignore them
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no
# preview command for fzf-tab
zstyle ':fzf-tab:complete:*:*' fzf-preview 'less ${(Q)realpath}'
export LESSOPEN="|~/.local/scripts/lessfilter.sh %s"

zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'
zstyle ':fzf-tab:complete:ssh:*' fzf-preview 'ping -c 4 $word'
zstyle ':fzf-tab:complete:tldr:*' fzf-preview 'tldr --color always $word'

# configure eza
zstyle ':omz:plugins:eza' 'icons' yes
zstyle ':omz:plugins:eza' 'dirs-first' yes
zstyle ':omz:plugins:eza' 'git-status' yes
zstyle ':omz:plugins:eza' 'size-prefix' binary

# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'

# load oh-my-zsh libs
HISTFILE="${ZSH_STATE_HOME}/history"
HISTSIZE=100000
SAVEHIST=100000
zinit snippet OMZL::history.zsh

zinit snippet OMZL::key-bindings.zsh
zinit snippet OMZL::completion.zsh

# load oh-my-zsh plugins
zinit ice has'fzf'
zinit light Aloxaf/fzf-tab

zinit ice has'fzf'
zinit light Freed-Wu/fzf-tab-source
# For postponing loading `fzf`
zinit ice \
    has'fzf' \
    lucid \
    wait
zinit snippet OMZP::fzf

zinit light zsh-users/zsh-autosuggestions
zinit light zdharma-continuum/fast-syntax-highlighting

# don't load zsh-vi-mode plugin if zsh don't have pcre module on freebsd
zinit ice if'[ $(uname -s) != "FreeBSD" ] || [ "$options[re_match_pcre]" = "on" ]'
zinit light jeffreytse/zsh-vi-mode
ZVM_INSERT_MODE_CURSOR=$ZVM_CURSOR_BLINKING_BEAM

# fallback to zsh built in vi mode and enable OMZ vi-mode plugin
zinit ice if'[ $(uname -s) = "FreeBSD" ] && [ "$options[re_match_pcre]" != "on" ]'
zinit snippet OMZP::vi-mode
VI_MODE_SET_CURSOR=true
VI_MODE_CURSOR_INSERT=5
[ $(uname -s) = "FreeBSD" ] && [ "$options[re_match_pcre]" != "on" ] && bindkey '^f' autosuggest-accept

zinit ice has'thefuck'
zinit snippet OMZP::thefuck

zinit ice if'[[ ! -x "$(command -v thefuck)" && -x "$(command -v sudo)" ]]'
zinit snippet OMZP::sudo

zinit snippet OMZP::brew
zinit snippet OMZP::asdf

zinit ice if'[[ -f /etc/os-release && "$(grep -i "^ID=" /etc/os-release)" == "ID=arch" ]]'
zinit snippet OMZP::archlinux

zinit snippet OMZP::extract

zinit ice has'eza'
zinit snippet OMZP::eza

ZOXIDE_CMD_OVERRIDE=cd
zinit ice has'zoxide'
zinit snippet OMZP::zoxide

zinit ice has'composer'
zinit snippet OMZP::composer

zinit load atuinsh/atuin

zinit add-fpath "$ZSH_CACHE_DIR/completions"

# compinit
autoload -U compinit
zstyle ':completion:*' cache-path "${XDG_CACHE_HOME:-${HOME}/.cache}/zsh/zcompcache"
compinit -d "${XDG_CACHE_HOME:-${HOME}/.cache}/zsh/zcompdump-${ZSH_VERSION}"

$SCRIPTS_HOME/install_starship.sh
[[ -x $BIN_HOME/starship ]] && eval "$(starship completions zsh)"

# create starship prompt
eval "$(starship init zsh)"
